<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="UsersMapper">

    <!-- Beans의 멤버변수(property)이름과 대상 테이블의 컬럼(column)을 연결한다. -->
    <resultMap id="usersMapper"
        type="study.spring.hellobook.model.Users">
        <result property="id"             column="id" />
        <result property="email"          column="email" />
        <result property="point"          column="point" />
        <result property="address"        column="address" />
        <result property="nickname"       column="nickname" />
        <result property="created_at"     column="created_at" />
        <result property="updated_at"     column="updated_at" />
    </resultMap>
    
    <!-- Beans의 멤버변수(property)이름과 대상 테이블의 컬럼(column)을 연결한다. -->
    <resultMap id="authMapper"
        type="study.spring.hellobook.model.Auth">
        <result property="user_id"         column="user_id" />
        <result property="pw"              column="pw" />
        <result property="tel"             column="tel" />
    </resultMap>

    <!-- 데이터 수 조회를 위한 기능 정의 -->
    <select id="selectCountAll"
        parameterType="study.spring.hellobook.model.Users" resultType="int">
        SELECT COUNT (*)
        FROM users
    </select>
    
     <!-- 단일행 조회를 위한 기능 정의 -->
    <select id="selectItem" parameterType="study.spring.hellobook.model.Users"
        resultMap="usersMapper">
        SELECT * FROM users WHERE id=#{id};
    </select>
    
    <!-- 개인정보 조회를 위한 기능 정의 -->
    <select id="selectUsersInfoItem" parameterType="study.spring.hellobook.model.Auth"
        resultMap="authMapper">
        SELECT * FROM auth WHERE user_id=#{user_id};
    </select>
    
    <!--  로그인 아이디로 사용자 정보조회 -->
	<select id="EmailCheck" parameterType = "study.spring.hellobook.model.Users" resultMap="usersMapper">
		SELECT * FROM users WHERE email = #{email}
	</select>
	
	<select id="pwCheck" parameterType = "study.spring.hellobook.model.Users" resultMap="usersMapper">
		SELECT email, pw FROM users WHERE email = #{email}
	</select>
	
	<!-- 회원정보 저장을 위한 기능 정의 -->
	<insert id="insertUser"
		parameterType = "study.spring.hellobook.model.Users"
		useGeneratedKeys="true" keyProperty="id">
		INSERT INTO users(email, address, nickname)
		VALUES(#{email}, #{address}, #{nickname}
		)
	</insert>
	
	<!-- 회원정보 저장을 위한 기능 정의 - 개인정보 -->
	<insert id="insertUser2"
		parameterType = "study.spring.hellobook.model.Users_books">
		INSERT INTO auth(pw, tel, user_id)
		VALUES(#{pw}, #{tel}, #{user_id})
	</insert>
	
	<!--  아이디 중복 확인을 위한 기능 정의 -->
	<select id="idCheck" parameterType = "study.spring.hellobook.model.Users" resultType="int">
		SELECT COUNT(*) FROM users WHERE email = #{email}
	</select>
	
	<!-- 개인정보 수정하기  -->
	<update id = "usersRevise"
	parameterType = "study.spring.hellobook.model.Users">
		UPDATE users SET
		address = #{address},
		nickname = #{nickname},
		updated_at = now()
		WHERE id = #{id}
	</update>
	
	<!-- 개인정보 수정하기  -->
	<update id = "usersInfoRevise"
	parameterType = "study.spring.hellobook.model.Auth">
		UPDATE auth SET
			pw = #{pw},
			tel = #{tel}
		WHERE user_id = #{user_id}
	</update>

</mapper>
