<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="BooksMapper">

    <!-- Beans의 멤버변수(property)이름과 대상 테이블의 컬럼(column)을 연결한다. -->
    <resultMap id="booksMap"
        type="study.spring.hellobook.model.Books">
        <result property="id"   column="id" />
        <result property="title"     column="title" />
        <result property="writer"   column="writer" />
        <result property="pub" column="pub" />
        <result property="created_at" column="created_at" />
        <result property="updated_at"     column="updated_at" />
        <result property="isrent"   column="isrent" />
    </resultMap>

    <!-- 단일행 조회를 위한 기능 정의 -->
    <select id="selectItem" parameterType="study.spring.hellobook.model.Books" resultMap="booksMap">
        SELECT id, title, writer, pub, created_at, updated_at, isrent
        FROM books 
        WHERE id=#{id}
    </select>

    <!-- 다중행 조회를 위한 기능 정의 -->
    <select id="selectList" parameterType="study.spring.hellobook.model.Books" resultMap="booksMap">
        SELECT id, title, writer, pub, created_at, updated_at, isrent
        FROM books 

        <where>
            <if test="title != null and title != ''">
                title LIKE concat('%', #{title}, '%')
            </if>
        </where>

        ORDER BY id DESC

        <if test="listCount > 0">
            LIMIT #{offset}, #{listCount}
        </if>
    </select>

    <!-- 데이터 수 조회를 위한 기능 정의 -->
    <select id="selectCountAll" parameterType="study.spring.hellobook.model.Books" resultType="int">
        SELECT COUNT(*)
        FROM books

        <where>
            <if test="title != null and title != ''">
                title LIKE concat('%', #{title}, '%')
            </if>
        </where>
    </select>

    <!-- 데이터 저장을 위한 기능 정의 -->
    <insert id="insertItem" parameterType="study.spring.hellobook.model.Books" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO books (
           title, writer, pub, created_at, updated_at, isrent
        ) VALUES (
            #{title}, #{writer}, #{pub}, #{created_at}, #{updated_at}, #{isrent}
        )
    </insert>

    <!-- 데이터 삭제를 위한 기능 정의 -->
    <delete id="deleteItem" parameterType="study.spring.hellobook.model.Books">
        DELETE FROM books WHERE id=#{id}
    </delete>

    <!-- 데이터 갱신을 위한 기능 정의 -->
    <update id="updateItem" parameterType="study.spring.hellobook.model.Books">
        UPDATE books SET
            title=#{title}, writer=#{writer}, pub=#{pub}, created_at=#{created_at}, updated_at=#{updated_at}, isrent=#{isrent}
        WHERE id=#{id}
    </update>
</mapper>